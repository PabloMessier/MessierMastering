#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Directory paths relative to JS folder (parent directory)
const directories = {
    audio: {
        'Mastering-Examples': '../audio/Mastering-Examples',
        'Audio-Restoration-Examples': '../audio/Audio-Restoration-Examples'
    },
    VIDEO: {
        'Collaboration': '../VIDEO/Collaboration',
        'Mastering': '../VIDEO/Mastering',
        'Restoration': '../VIDEO/Restoration'
    }
};

// File extensions to include
const audioExtensions = ['.wav', '.mp3', '.flac', '.aac'];
const videoExtensions = ['.mp4', '.avi', '.mov', '.mkv'];

function scanDirectory(dirPath, allowedExtensions) {
    try {
        if (!fs.existsSync(dirPath)) {
            console.warn(`⚠️  Directory not found: ${dirPath}`);
            return [];
        }

        const files = fs.readdirSync(dirPath)
            .filter(file => {
                const ext = path.extname(file).toLowerCase();
                return allowedExtensions.includes(ext);
            })
            .sort(); // Sort alphabetically for consistency

        console.log(`✅ Found ${files.length} files in ${dirPath}`);
        return files;
    } catch (error) {
        console.error(`❌ Error scanning ${dirPath}:`, error.message);
        return [];
    }
}

function generateConfig() {
    console.log('🔍 Scanning media directories...\n');

    const config = {
        audio: {},
        VIDEO: {}
    };

    // Scan audio directories
    for (const [key, dirPath] of Object.entries(directories.audio)) {
        config.audio[key] = scanDirectory(dirPath, audioExtensions);
    }

    // Scan video directories  
    for (const [key, dirPath] of Object.entries(directories.VIDEO)) {
        config.VIDEO[key] = scanDirectory(dirPath, videoExtensions);
    }

    return config;
}

function writeConfigFile(config) {
    const configContent = `// Site configuration - auto-generated by scan-media.js
// Last updated: ${new Date().toISOString()}
const siteConfig = ${JSON.stringify(config, null, 4)};`;

    const outputPath = './config.js';
    
    try {
        fs.writeFileSync(outputPath, configContent, 'utf8');
        console.log(`\n✅ Config file written to: JS/${outputPath}`);
        
        // Calculate totals
        const audioTotal = Object.values(config.audio).reduce((sum, files) => sum + files.length, 0);
        const videoTotal = Object.values(config.VIDEO).reduce((sum, files) => sum + files.length, 0);
        
        console.log(`📊 Summary:`);
        console.log(`   Audio files: ${audioTotal}`);
        console.log(`   Video files: ${videoTotal}`);
        console.log(`   Total files: ${audioTotal + videoTotal}`);
        
    } catch (error) {
        console.error(`❌ Error writing config file:`, error.message);
        process.exit(1);
    }
}

// Main execution
console.log('🚀 Media Directory Scanner');
console.log('==========================\n');

const config = generateConfig();
writeConfigFile(config);

console.log('\n🎉 Scan completed successfully!');
console.log('\n💡 Next steps:');
console.log('   1. Review the generated JS/config.js file');
console.log('   2. Test your website locally');
console.log('   3. Deploy to S3 with the updated config');